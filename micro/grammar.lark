// imports WORD from library
%import common.DIGIT
%import common.LETTER
%import common.WS
%ignore WS


start: extern_declaration*
?extern_declaration: code

code: code_declaration code_definition
code_declaration: CODE declaration arg_declaration
arg_declaration: "(" [declaration ("," declaration)*] ")"
code_definition: "{" statement* "}"

function_call: identifier "(" [arguments ("," arguments)*] ")"
arguments: identifier

?statement: var_declaration
         | assignment_expression
         | function_call
         | return

return: RETURN
      | RETURN expression

assignment_expression: lvalue "=" rvalue

?lvalue: identifier
      | var_declaration

?rvalue: expression

?unary: NUMBER
     | identifier
     | function_call
     | "(" expression ")"

?expression: addative
?addative: multiplicative
        | add
        | subtract

add: addative "+" multiplicative
subtract: addative "-" multiplicative

?multiplicative : unary
               | multiply
               | subtract

multiply: multiplicative "*" unary
divide: multiplicative "/" unary   

var_declaration: VAR declaration

declaration: identifier ":" type
type: ID
identifier: ID

CODE: "code"
VAR: "var"
RETURN: "return"
ID: ("_"|LETTER) ("_"|LETTER|DIGIT)*
NUMBER: DIGIT+
